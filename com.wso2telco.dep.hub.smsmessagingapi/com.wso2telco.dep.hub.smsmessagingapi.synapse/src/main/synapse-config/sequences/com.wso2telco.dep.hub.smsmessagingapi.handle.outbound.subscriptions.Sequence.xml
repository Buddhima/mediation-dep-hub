<?xml version="1.0" encoding="UTF-8"?>
<sequence
	name="com.wso2telco.dep.hub.smsmessagingapi.handle.outbound.subscriptions.Sequence"
	trace="disable" xmlns="http://ws.apache.org/ns/synapse">
	<sequence key="com.wso2telco.dep.common.main.request.Sequence" />
	<property name="messageType" scope="axis2" type="STRING"
		value="application/json" />
	<property
		expression="json-eval($.deliveryReceiptSubscription.callbackReference.callbackData)"
		name="callbackData" scope="default" type="STRING" />
	<property expression="fn:normalize-space($ctx:callbackData)"
		group="1" name="callbackData" pattern="((^(?!null).*$)|(^(null).+$))"
		scope="default" type="STRING" />
	<property
		expression="json-eval($.deliveryReceiptSubscription.callbackReference.notifyURL)"
		name="notifyURL" scope="default" type="STRING" />
	<property expression="fn:normalize-space($ctx:notifyURL)"
		group="1" name="notifyURL" pattern="((^(?!null).*$)|(^(null).+$))"
		scope="default" type="STRING" />
		
	<property
		expression="json-eval($.deliveryReceiptSubscription.clientCorrelator)"
		name="clientCorrelator" scope="default" type="STRING" />
	<property expression="fn:normalize-space($ctx:clientCorrelator)"
		group="1" name="clientCorrelator" pattern="((^(?!null).*$)|(^(null).+$))"
		scope="default" type="STRING" />
	<!-- validate mandatory parameters of the request -->
	<filter xpath="not(boolean($ctx:notifyURL))">
		<then>
			<property expression="fn:concat('notifyURL',',')" name="missingParameters"
				scope="default" type="STRING" />
			<property name="MANDATORY_PARAMETER_VALIDATED" scope="default"
				type="STRING" value="false" />
		</then>
		<else />
	</filter>
	<foreach expression="//deliveryReceiptSubscription/senderAddresses"
		xmlns:ns="http://org.apache.synapse/xsd">
		<sequence>
			<property expression="json-eval($.senderAddresses.senderAddress)"
				name="senderAddress" scope="default" type="STRING" />
			<property expression="fn:normalize-space($ctx:senderAddress)"
				group="1" name="senderAddress" pattern="((^(?!null).*$)|(^(null).+$))"
				scope="default" type="STRING" />

			<filter xpath="not(boolean($ctx:senderAddress))">
				<then>
					<property
                        expression="fn:concat($ctx:missingParameters, 'senderAddress,')"
                        name="missingParameters" scope="default" type="STRING"/>
					<property name="MANDATORY_PARAMETER_VALIDATED" scope="default"
						type="STRING" value="false" />
				</then>
				<else />
			</filter>

			<property expression="json-eval($.senderAddresses.operatorCode)"
				name="operatorCode" scope="default" type="STRING" />
			<property expression="fn:normalize-space($ctx:operatorCode)"
				group="1" name="operatorCode" pattern="((^(?!null).*$)|(^(null).+$))"
				scope="default" type="STRING" />


			<filter xpath="not(boolean($ctx:operatorCode))">
				<then>
					<property
                        expression="fn:concat($ctx:missingParameters, 'operatorCode,')"
                        name="missingParameters" scope="default" type="STRING"/>
					<property name="MANDATORY_PARAMETER_VALIDATED" scope="default"
						type="STRING" value="false" />
				</then>
				<else />
			</filter>

			<property expression="json-eval($.senderAddresses.filterCriteria)"
				name="filterCriteria" scope="default" type="STRING" />
			<property expression="fn:normalize-space($ctx:filterCriteria)"
				group="1" name="filterCriteria" pattern="((^(?!null).*$)|(^(null).+$))"
				scope="default" type="STRING" />
			<filter xpath="not(boolean($ctx:filterCriteria))">
				<then>
					<property
                        expression="fn:concat($ctx:missingParameters, 'filterCriteria,')"
                        name="missingParameters" scope="default" type="STRING"/>
					<property name="MANDATORY_PARAMETER_VALIDATED" scope="default"
						type="STRING" value="false" />
				</then>
				<else />
			</filter>
		</sequence>
	</foreach>
	<filter regex="false" source="get-property('MANDATORY_PARAMETER_VALIDATED')">
		<then>
			<property
				expression="fn:substring($ctx:missingParameters, 0, fn:string-length($ctx:missingParameters))"
				name="missingParameters" scope="default" type="STRING" />
			<property name="httpStatusCode" scope="default" type="STRING"
				value="400" />
			<property name="exceptionType" scope="default" type="STRING"
				value="SERVICE_EXCEPTION" />
			<property name="messageId" scope="default" type="STRING"
				value="SVC0002" />
			<property name="errorText" scope="default" type="STRING"
				value="Invalid input value for message part %1" />
			<filter regex="^false$"
				source="boolean(fn:contains($ctx:missingParameters, ','))">
				<then>
					<property
						expression="fn:concat('Missing mandatory parameter: ', $ctx:missingParameters)"
						name="errorVariable" scope="default" type="STRING" />
				</then>
				<else>
					<property
						expression="fn:concat('Missing mandatory parameters: ', $ctx:missingParameters)"
						name="errorVariable" scope="default" type="STRING" />
				</else>
			</filter>
			<sequence key="com.wso2telco.dep.common.response.exceptions.Sequence" />
		</then>
		<else />
	</filter>
	
	<!-- generating request clientCorrelator -->
    <call-template target="com.wso2telco.dep.common.clientCorrelator.generator.Template">
      <with-param name="clientCorrelator" value="{$ctx:clientCorrelator}"/>
    </call-template>
	<!-- save service provider's notify url and generate new notify url from hub -->
	<call-template target="com.wso2telco.dep.common.notification.url.readModify.Template">
      <with-param name="apiRefCode" value="smsmessaging"/>
      <with-param name="notifyURL" value="{$ctx:notifyURL}"/>
      <with-param name="notifyURLParamName" value="outboundNotificationURL"/>	    
    </call-template>
    <!-- update clientCorrelator and notifyURL with generated values -->
    <script language="js"><![CDATA[var payload = mc.getPayloadJSON();
	payload.deliveryReceiptSubscription.clientCorrelator = mc.getProperty("uniqueClientCorrelator");
	payload.deliveryReceiptSubscription.callbackReference.notifyURL = mc.getProperty("generatedNotifyURL");
	mc.setPayloadJSON(payload);]]></script>
	<sequence key="com.wso2telco.dep.common.main.response.Sequence" />
</sequence>
