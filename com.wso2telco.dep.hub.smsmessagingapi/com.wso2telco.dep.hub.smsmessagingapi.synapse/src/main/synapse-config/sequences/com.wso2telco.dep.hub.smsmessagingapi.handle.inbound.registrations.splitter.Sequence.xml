<?xml version="1.0" encoding="UTF-8"?>
<sequence name="com.wso2telco.dep.hub.smsmessagingapi.handle.inbound.registrations.splitter.Sequence" trace="disable" xmlns="http://ws.apache.org/ns/synapse">
    <iterate attachPath="//inboundSMSMessages" expression="//registrations" id="smsmessagingapi.inbound.registrations.splitter" preservePayload="true" sequential="true">
        <target>
            <sequence>

                <log level="custom">
                    <property name="status" value="++++++++++ iteration starts ++++++++"/>
                    <property name="REMAINING_BATCH_SIZE" expression="get-property('operation', 'REMAINING_BATCH_SIZE')"/>
                    <property name="TOTAL_RESPONSE_COUNT" expression="get-property('operation', 'TOTAL_RESPONSE_COUNT')"/>
                    <property name="TOTAL_PENDING_COUNT" expression="get-property('operation', 'TOTAL_PENDING_COUNT')"/>
                </log>

                <property name="REMAINING_BATCH_SIZE" expression="get-property('operation', 'REMAINING_BATCH_SIZE')" scope="default" type="FLOAT"/>

                <script language="js">
                    <![CDATA[
                        var operator_batch_size = mc.getProperty('OPERATOR_BATCH_SIZE');
	            	 	var remaining_batch_size = mc.getProperty('REMAINING_BATCH_SIZE');

	            	 	mc.setProperty('CURRENT_OPERATOR_BATCH_SIZE', parseFloat(operator_batch_size) + parseFloat(remaining_batch_size));
                    ]]>
                </script>
                <property expression="//registrations/registrationID/text()" name="REGISTRATION_ID" scope="default" type="STRING"/>
                <property expression="fn:normalize-space($ctx:REGISTRATION_ID)" group="1" name="REGISTRATION_ID" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING"/>
                <property expression="//registrations/operatorCode/text()" name="OPERATOR_CODE" scope="default" type="STRING"/>
                <property expression="fn:normalize-space($ctx:OPERATOR_CODE)" group="1" name="OPERATOR_CODE" pattern="((^(?!null).*$)|(^(null).+$))" scope="default" type="STRING"/>
                <!-- retrieve operator's endpoint -->
                <sequence key="com.wso2telco.dep.common.operator.endpoint.retriever.Sequence"/>
                <filter regex="true" source="get-property('default', 'ENDPOINT_NOT_PROVISIONED')">
                    <then>
                        <property name="messageStatus" scope="default" type="STRING" value="Not Provisioned"/>
                        <!-- dummy endpoint call to step-out from iterate -->
                        <call>
                            <endpoint key="com.wso2telco.dep.hub.smsmessagingapi.dummy.Endpoint"/>
                        </call>
                    </then>
                    <else>
                        <sequence key="com.wso2telco.dep.common.select.token.Sequence"/>
                        <property expression="fn:concat($ctx:API_ENDPOINT, '/inbound/registrations/', $ctx:REGISTRATION_ID, '/messages')" name="API_ENDPOINT" scope="default" type="STRING"/>
                        <filter xpath="(boolean($ctx:MAX_BATCH_SIZE))">
                            <then>
                                <property expression="fn:concat($ctx:API_ENDPOINT,'?maxBatchSize=', $ctx:CURRENT_OPERATOR_BATCH_SIZE)" name="API_ENDPOINT" scope="default" type="STRING"/>
                            </then>
                            <else/>
                        </filter>

                        <log level="custom">
                            <property name="status" expression="$ctx:API_ENDPOINT"/>
                        </log>

                        <property name="HTTP_METHOD" scope="axis2" type="STRING" value="GET"/>
                        <property action="remove" name="REST_URL_POSTFIX" scope="axis2"/>
                        <sequence key="com.wso2telco.dep.common.call.endpoint.Sequence"/>

                        <log level="custom">
                            <property name="REMAINING_BATCH_SIZE" expression="get-property('operation', 'REMAINING_BATCH_SIZE')"/>
                            <property name="TOTAL_RESPONSE_COUNT" expression="get-property('operation', 'TOTAL_RESPONSE_COUNT')"/>
                            <property name="TOTAL_PENDING_COUNT" expression="get-property('operation', 'TOTAL_PENDING_COUNT')"/>
                        </log>


                        <property name="REMAINING_BATCH_SIZE" expression="get-property('operation', 'REMAINING_BATCH_SIZE')" scope="default" type="FLOAT"/>
                        <property name="TOTAL_RESPONSE_COUNT" expression="get-property('operation', 'TOTAL_RESPONSE_COUNT')" scope="default" type="FLOAT"/>
                        <property name="TOTAL_PENDING_COUNT" expression="get-property('operation', 'TOTAL_PENDING_COUNT')" scope="default" type="FLOAT"/>

                        <script language="js"><![CDATA[var current_operator_batch_size = mc.getProperty('CURRENT_OPERATOR_BATCH_SIZE');

			            	 	var resultant_batch_size = mc.getPayloadJSON().inboundSMSMessageList.numberOfMessagesInThisBatch;
			            	 	var resultant_pending_count = mc.getPayloadJSON().inboundSMSMessageList.totalNumberOfPendingMessages;

			            	 	mc.setProperty('REMAINING_BATCH_SIZE', parseFloat(current_operator_batch_size) - parseFloat(resultant_batch_size));

			            	 	var current_total_response_count = mc.getProperty('TOTAL_RESPONSE_COUNT') + parseFloat(resultant_batch_size);
			            	 	var current_total_pending_count = mc.getProperty('TOTAL_PENDING_COUNT') + parseFloat(resultant_pending_count);

			            	 	mc.setProperty('TOTAL_RESPONSE_COUNT', current_total_response_count);
            	 				mc.setProperty('TOTAL_PENDING_COUNT', current_total_pending_count);]]></script>

                        <property name="REMAINING_BATCH_SIZE" expression="get-property('default', 'REMAINING_BATCH_SIZE')" scope="operation" type="FLOAT"/>
                        <property name="TOTAL_RESPONSE_COUNT" expression="get-property('default', 'TOTAL_RESPONSE_COUNT')" scope="operation" type="FLOAT"/>
                        <property name="TOTAL_PENDING_COUNT" expression="get-property('default', 'TOTAL_PENDING_COUNT')" scope="operation" type="FLOAT"/>

                    </else>
                </filter>
            </sequence>
        </target>
    </iterate>
</sequence>
